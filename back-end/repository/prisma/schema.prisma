generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  role      String

  trainer   Trainer?
}

model Trainer {
  id         Int        @id @default(autoincrement())
  userId     Int        @unique
  user       User       @relation(fields: [userId], references: [id])

  pokemon    Pokemon[]
  badges     Badge[]
  gymBattles GymBattle[]
}

model Pokemon {
  id        Int    @id @default(autoincrement())
  name      String
  type      String
  health    Int
  canEvolve Boolean

  trainerId Int
  trainer   Trainer @relation(fields: [trainerId], references: [id])

  stats     Stats   @relation(fields: [statsId], references: [id])
  statsId   Int     @unique
}

model Stats {
  id            Int @id @default(autoincrement())
  hp            Int
  attack        Int
  defence       Int
  specialAttack Int
  specialDefence Int
  speed         Int

  pokemon       Pokemon? @relation
}

model Badge {
  id        Int         @id @default(autoincrement())
  name      String
  location  String
  difficulty Int
  trainerId Int
  trainer   Trainer     @relation(fields: [trainerId], references: [id])

  gymBattles GymBattle[] 
}

model GymBattle {
  id        Int      @id @default(autoincrement())
  date      DateTime
  time      DateTime
  badgeId   Int
  trainerId Int

  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade) // Specify onDelete if necessary
  trainer   Trainer  @relation(fields: [trainerId], references: [id])
}
